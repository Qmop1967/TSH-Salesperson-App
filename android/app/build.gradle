plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

// Use Codemagic environment variables if available, otherwise use key.properties
def getKeystoreProperty = { String key, String envVar = null ->
    if (envVar != null && System.getenv(envVar) != null) {
        return System.getenv(envVar)
    }
    return keystoreProperties[key]
}

android {
    namespace = "com.tsh.sales.tsh_salesperson_app"
    compileSdk = 35
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    defaultConfig {
        applicationId = "com.tsh.sales.tsh_salesperson_app"
        minSdk = 21
        targetSdk = 35
        versionCode = 1
        versionName = "1.0.0"
        multiDexEnabled = true
    }

    signingConfigs {
        release {
            // Use Codemagic environment variables if available, otherwise use key.properties
            def useCodemagic = System.getenv("CM_KEYSTORE") != null
            
            if (useCodemagic) {
                // Codemagic signing configuration
                keyAlias = System.getenv("CM_KEY_ALIAS") ?: "my-key-alias"
                keyPassword = System.getenv("CM_KEY_PASSWORD")
                storeFile = file(System.getenv("CM_KEYSTORE"))
                storePassword = System.getenv("CM_KEYSTORE_PASSWORD")
            } else if (keystoreProperties['keyAlias'] != null) {
                // Local development signing configuration
                keyAlias = keystoreProperties['keyAlias']
                keyPassword = keystoreProperties['keyPassword']
                storeFile = file(keystoreProperties['storeFile'])
                storePassword = keystoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        release {
            // Use release signing if either Codemagic env vars or key.properties are available
            def hasCodemagicSigning = System.getenv("CM_KEYSTORE") != null
            def hasLocalSigning = keystoreProperties['keyAlias'] != null
            
            signingConfig = (hasCodemagicSigning || hasLocalSigning) ? signingConfigs.release : signingConfigs.debug
            minifyEnabled = true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig = signingConfigs.debug
        }
    }
}

flutter {
    source = "../.."
}